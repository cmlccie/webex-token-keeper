AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: webex-token-keeper

Globals:
  Function:
    Runtime: python3.7
    Timeout: 270

Parameters:
  DomainName:
    Type: String
    Description: Custom domain name for the API gateway
  HostedZoneId:
    Type: String
    Description: ID of the Route 53 zone where the custom domain is hosted
  CertificateArn:
    Type: String
    Description: ARN for the certificate to be used by the API gateway
  TableName:
    Type: String
    Description: Name of the DynamoDB table
    Default: "webex-token-keeper"
  WebexTeamsClientId:
    Type: String
    Description: Webex Teams integration Client ID
  WebexTeamsClientSecret:
    Type: String
    Description: Webex Teams integration Client Secret
  WebexTeamsRedirectUri:
    Type: String
    Description: Webex Token Keeper URI to redirect users to after OAuth authorization flow
  WebexTeamsOauthAuthorizationUrl:
    Type: String
    Description: Webex Teams OAuth authorization URL

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: user_key
          AttributeType: S
      KeySchema:
        - AttributeName: user_key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  WebexTokenKeeper:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: wtk.handler
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          WTK_TABLE_NAME: !Ref TableName
          WEBEX_TEAMS_CLIENT_ID: !Ref WebexTeamsClientId
          WEBEX_TEAMS_CLIENT_SECRET: !Ref WebexTeamsClientSecret
          WEBEX_TEAMS_REDIRECT_URI: !Ref WebexTeamsRedirectUri
          WEBEX_TEAMS_OAUTH_AUTHORIZATION_URL: !Ref WebexTeamsOauthAuthorizationUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        Base:
          Type: Api
          Properties:
            Method: any
            Path: /
            RestApiId: !Ref Api
        Others:
          Type: Api
          Properties:
            Method: any
            Path: /{proxy+}
            RestApiId: !Ref Api

  Api:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: Prod
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        Route53:
          HostedZoneId: !Ref HostedZoneId
      BinaryMediaTypes:
        - "~1"
      DefinitionBody:
        openapi: "3.0"
        info:
          title: !Ref "AWS::StackName"
          version: "1.0"
        paths:
          /:
            x-amazon-apigateway-any-method:
              responses:
                {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebexTokenKeeper.Arn}/invocations"
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses:
                {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebexTokenKeeper.Arn}/invocations"

Outputs:
  WebexTokenKeeperApi:
    Description: "API Gateway endpoint URL for Prod Webex Token Keeper app"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WebexTokenKeeperFunction:
    Description: "Webex Token Keeper Function ARN"
    Value: !GetAtt WebexTokenKeeper.Arn
  WebexTokenKeeperFunctionIamRole:
    Description: "Implicit IAM Role created for the Webex Token Keeper function"
    Value: !GetAtt WebexTokenKeeperRole.Arn
